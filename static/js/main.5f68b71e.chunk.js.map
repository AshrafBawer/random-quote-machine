{"version":3,"sources":["components/QuoteBox.js","components/App.js","index.js"],"names":["QuoteBox","props","console","log","handleChangeClick","e","target","dataset","check","className","class","data-toggle","onClick","data-check","type","name","id","autocomplete","checked","href","state","selectedQuote","quote","author","getRandomQuoteAndColor","changeColor","colorsArray","App","quotes","change","Math","floor","random","length","randomColor","setState","document","querySelector","style","background","color","buttonList","querySelectorAll","i","borderColor","axios","get","then","response","data","this","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.5f68b71e.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./QuoteBox.css\";\r\n\r\nconst QuoteBox = (props) => {\r\n    console.log(props);\r\n    const handleNewQuote = () => {\r\n        props.getRandomQuoteAndColor(props.state.changeColor);\r\n    }\r\n\r\n    const handleChangeClick = (e) => {\r\n    let check = e.target.dataset.check;\r\n    if(check === 'true'){\r\n        props.handleChangeClick(true);\r\n    }else {\r\n        props.handleChangeClick(false);\r\n    }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" >\r\n            <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n                <label onClick={handleChangeClick} data-check='true' class=\"btn no-shadow btn-background active\">\r\n                    <input type=\"radio\" name=\"options\" id=\"option1\"  autocomplete=\"off\" checked />Change\r\n                </label>\r\n                <label onClick={handleChangeClick} data-check='false' class=\"btn btn-background\">\r\n                    <input  type=\"radio\" name=\"options\" id=\"option2\"  autocomplete=\"off\" /> Don't change background\r\n                </label>\r\n            </div>\r\n            <div id=\"quote-box\"  class=\"card\">\r\n            <div class=\"card-header\">\r\n                Quote\r\n                <a class=\"btn btn-outline-primary\" target=\"_blank\" id=\"tweet-quote\" href=\"https://www.twitter.com/intent/tweet\">Tweet</a>\r\n            </div>\r\n            <div class=\"card-body\">\r\n                <blockquote class=\"blockquote mb-0\">\r\n                <p id=\"text\">{props.state.selectedQuote.quote}</p>\r\n                <footer id=\"author\" class=\"blockquote-footer\">{props.state.selectedQuote.author}</footer>\r\n                </blockquote>\r\n                <button id=\"new-quote\" onClick={handleNewQuote}  className=\"btn btn-background\">New Quote</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuoteBox;","import React from 'react';\r\nimport QuoteBox from './QuoteBox';\r\nimport axios from 'axios';\r\n\r\n//https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\r\n\r\nlet colorsArray = [\r\n    ['#7f7fd5, #86a8e7, #91eae4', '#7f7fd5'],\r\n    ['#c31432, #240b36', '#c31432'],\r\n    ['#f12711, #f5af19', '#f12711'],\r\n    ['#659999, #f4791f', '#659999'],\r\n    ['#654ea3, #eaafc8', '#654ea3'],\r\n    ['#ff416c, #ff4b2b', '#ff416c'],\r\n    ['#5a3f37, #2c7744', '#5a3f37'],\r\n    ['#114357, #f29492', '#114357'],\r\n    ['#403a3e, #be5869', '#403a3e'],\r\n    ['#da4453, #89216b', '#da4453'],\r\n    ['#808080, #3fada8', '#808080'],\r\n    ['#000428, #004e92', '#000428']\r\n]\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {selectedQuote: {}, quotes: [], changeColor: true}\r\n\r\n    componentDidMount(){\r\n        axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json').then(response => {\r\n            this.setState({quotes:response.data.quotes });\r\n            this.getRandomQuoteAndColor(this.state.changeColor);\r\n        });\r\n\r\n    }\r\n\r\n    getRandomQuoteAndColor = (change) => {\r\n        let selectedQuote = Math.floor(Math.random() * this.state.quotes.length);\r\n        let randomColor = Math.floor(Math.random() * colorsArray.length);\r\n        console.log(randomColor);\r\n        this.setState({ selectedQuote: this.state.quotes[selectedQuote] });\r\n        console.log(colorsArray[randomColor]);\r\n        if(change){\r\n            document.querySelector('.main').style.background = `linear-gradient(to right,${colorsArray[randomColor][0]})`;\r\n            document.querySelector('.card').style.color = colorsArray[randomColor][1];\r\n            let buttonList = document.querySelectorAll('.btn-background');\r\n            for(let i=0; i< buttonList.length; i++ ){\r\n                buttonList[i].style.background = colorsArray[randomColor][1];\r\n            }\r\n\r\n            document.querySelector('#tweet-quote').style.background = 'white';\r\n            document.querySelector('#tweet-quote').style.color = colorsArray[randomColor][1];\r\n            document.querySelector('#tweet-quote').style.borderColor = colorsArray[randomColor][1];\r\n        }\r\n            \r\n        \r\n    }\r\n\r\n    handleChangeClick = (check) => {\r\n        if(check === true){\r\n            this.setState({changeColor: true});\r\n        }else {\r\n            this.setState({changeColor: false});\r\n        }\r\n        \r\n        console.log(this.state);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main\">\r\n                <QuoteBox state={this.state} handleChangeClick={this.handleChangeClick} getRandomQuoteAndColor={this.getRandomQuoteAndColor} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n)"],"sourceRoot":""}